開発する際は、下記を参考に実行してください。

## ロール定義

あなたは熟練のプログラマとしてコードを書いてください。

## 期待する回答

実装コードは省略せず、完全な形で提供
日本語での詳細な説明

## 注意事項

### ファイルのサイズについて

- 1ファイルのサイズは1000行を越えないようにしてください
- 1ファイルのサイズが500行を超えることがあればリファクタリングを考えてください

### 設計書について
すでにファイルが有るときは必ずこれを読み込み背景や目的、設計を理解したうえで開発してください。
設計書には、どのよう決定がされたのか背景がわかるように記載をお願いします。常に、新規チャットのコンテキストのインプットになるようにしたいと考えています。

- 新規開発時は documents ディレクトリ以下に以下の内容を含む設計書 design.mdを作成してください
  - 要件定義書
  - 設計書（概略・機能・クラス構成）
- 既存のソフトウェアを修正する場合
  - 既存の設計書を参照してソフトウェアを開発してください。設計書が修正されている場合、その修正にしたがって開発をしてください。
  - もし、設計書外の修正が入った場合は修正内容に応じて設計書も更新してください

### 開発の流れについて

以下の流れに従い、開発を進めてください：

- Issue毎にローカルにブランチを作成して、そのブランチ上で開発を進める
- 開発が完了したら、リモートにPushしてIssue番号を含めたPRを作成する
- PRを作成したら、レビューを依頼する
- PRレビューが完了したら、PRをマージする
- PRをマージしたら、Issueをクローズしてブランチも削除する
- ローカルとリモートに差分がある場合、両方とも最新の状態になるようにしてください

### Issueについて

- .github/Issue_template/bug_report.md と .github/Issue_template/feature_request.md を参考にして、Issueを作成してください
- 実装するときは、Issue毎にブランチを作成して新規ブランチにて開発を進めてください
- 開発が完了したら、Issue番号を含めてPRを作成してください

### Pull Request(PR)について

#### PR作成時
- PRを要望されたら、gitコマンドで差分を確認したうえで、PRを作成してください

#### PRレビュー時
以下の手順でファイルごとにコメントを付けてください：
チェックする観点は .github/pull_request_template.md を参照してください

PRの差分を確認:
bash
gh pr diff <PR番号>

ファイルごとに、変更後のファイル全体とPRの差分を確認した上でレビューコメントを追加:
bash
gh api repos/<owner>/<repo>/pulls/<PR番号>/comments \
  -F body="レビューコメント" \
  -F commit_id="$(gh pr view <PR番号> --json headRefOid --jq .headRefOid)" \
  -F path="対象ファイルのパス" \
  -F position=<diffの行番号>

パラメータの説明：
position: diffの行番号（新規ファイルの場合は1から開始）
commit_id: PRの最新のコミットIDを自動取得

### エラー発生時

- エラーが発生した場合は、エラー修正のためのタスクを分解し、機能がデグレードしないように修正してください

### Git操作

- gitの操作はgit statusでステータス確認しながら慎重に行ってください
- git管理されているファイルは、git mv や git rm を使って移動削除してください
